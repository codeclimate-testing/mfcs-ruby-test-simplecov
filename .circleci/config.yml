version: 2
jobs:
  build:
    parallelism: 1  # however many CPUs you need/pay for
    
    #############################################
    # Container Setup
    #############################################
    docker:
      - image: circleci/ruby:2.7.2-node-browsers
        environment:
          - RAILS_ENV=test
          - CC_TEST_REPORTER_ID=eb58b59e9b4910607d1a8fbc2b5c179188627f4d7502dedae51c6929e1500af1
          - COVERAGE=true          
      - image: circleci/postgres:11 # database image
        environment: # environment variables for database, it is kind of obvious but it is important that they match with your test config in database.yml
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: circleci
      - image: docker.elastic.co/elasticsearch/elasticsearch:7.8.0
        environment:
          - cluster.name: elasticsearch
          - xpack.security.enabled: false
          - transport.host: localhost
          - network.host: 127.0.0.1
          - http.port: 9200
          - discovery.type: single-node                    
    
    #############################################
    # Build Steps
    #############################################
    steps:
      - checkout
      - run:
          name: Configure secrets.yml
          command: mv config/secrets.ci.yml config/secrets.yml
      - run:
          name: Configure database.yml
          command: mv config/database.ci.yml config/database.yml
      - run:
          name: Configure application.yml
          command: mv config/application.ci.yml config/application.yml      

      ###########################################
      # apt update
      ###########################################     
      - run:
          name: apt update
          command: sudo apt update

      ###########################################
      # Install Packages
      ###########################################     
      - run:
          name: Install Packages
          command: sudo apt-get install -y graphicsmagick ghostscript ffmpeg  
          
      ###########################################
      # Install Tesseract
      ###########################################     
      - run:
          name: Install Tesseract
          command: sudo apt-get install -y graphicsmagick ghostscript ffmpeg libleptonica-dev libtesseract-dev tesseract-ocr

      ###########################################
      # Yarn w/ caching
      ###########################################     
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      ###########################################
      # Bundler w/ caching
      ###########################################
      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v
      # Restore bundle cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - mfcs-bundle-v2-{{ checksum "Gemfile.lock" }}
            - mfcs-bundle-v2-
      - run: # Install Ruby dependencies
          name: Bundle Install
          command: bundle check --path vendor/bundle || bundle install
      # Store bundle cache for Ruby dependencies
      - save_cache:
          key: mfcs-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      ###########################################
      # Code Climate
      ###########################################
      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter            

      ###########################################
      # Database
      ###########################################
      # - run:
      #     name: Waiting for Postgres to be ready
      #     command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Load DB schema
          command: bin/rails db:schema:load --trace

      ###########################################
      # Run rspec in parallel
      ###########################################
      - run:
          name: Run rspec in parallel
          command: |
            mkdir -p test_results
            ./cc-test-reporter before-build
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      - run:
          name: Code Climate Test Coverage
          command: |
            ./cc-test-reporter format-coverage -t simplecov -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"    

      # Save test results for timing analysis
      - store_test_results:
          path: test_results
      - deploy:
          command: |
            ./cc-test-reporter sum-coverage --output - coverage/codeclimate.*.json | ./cc-test-reporter upload-coverage --debug --input -          